devtools::load_all(".")
library(LOGIT)
library(LOGIT)
library(LOGIT)
library(LOGIT)
library(LOGIT)
library(LOGIT)
library(LOGIT)
library(LOGIT)
library(LOGIT)
library(LOGIT)
library(LOGIT)
library(LOGIT)
library(LOGIT)
library(LOGIT)
library(LOGIT)
library(LOGIT)
library(MASS)
library(LOGIT)
data(medpar)
mylogit <- glm( died ~  los + white + hmo, family=binomial, data=medpar)
grp10 <- HLTest(obj=mylogit, g=10)
cbind(grp10$observed, round(grp10$expect, digits = 1))
grp10
detach("package:LOGIT", unload=TRUE)
library("LOGIT", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(MASS)
library(LOGIT)
data(medpar)
mylogit <- glm( died ~  los + white + hmo, family=binomial, data=medpar)
grp10 <- HLTest(obj=mylogit, g=10)
cbind(grp10$observed, round(grp10$expect, digits = 1))
grp10
HLTest<-function(obj, g) {
# first, check to see if we fed in the right kind of object
stopifnot(family(obj)$family == "binomial" && family(obj)$link == "logit")
y = obj$model[[1]]
trials = rep(1, times = nrow(obj$model))
if(any(colnames(obj$model) == "(weights)"))
trials <- obj$model[[ncol(obj$model)]]
# the double bracket (above) gets the index of items within an object
if (is.factor(y))
y = as.numeric(y) == 2  # Converts 1-2 factor levels to logical 0/1 values
yhat = obj$fitted.values
interval = cut(yhat, quantile(yhat, 0:g/g), include.lowest = TRUE)  # Creates factor with levels 1,2,...,g
Y1 <- trials*y
Y0 <- trials - Y1
Y1hat <- trials*yhat
Y0hat <- trials - Y1hat
obs = xtabs(formula = cbind(Y0, Y1) ~ interval)
expect = xtabs(formula = cbind(Y0hat, Y1hat) ~ interval)
if (any(expect < 5))
warning("Some expected counts are less than 5. Use smaller number of groups")
pear <- (obs - expect)/sqrt(expect)
chisq = sum(pear^2)
P = 1 - pchisq(chisq, g - 2)
# by returning an object of class "htest", the function will perform like the
# built-in hypothesis tests
return(structure(list(
method = c(paste("Hosmer and Lemeshow goodness-of-fit test with", g, "bins", sep = " ")),
data.name = deparse(substitute(obj)),
statistic = c(X2 = chisq),
parameter = c(df = g-2),
p.value = P,
pear.resid = pear,
expect = expect,
observed = obs
), class = 'htest'))
}
library(MASS)
library(LOGIT)
data(medpar)
mylogit <- glm( died ~  los + white + hmo, family=binomial, data=medpar)
grp10 <- HLTest(obj=mylogit, g=10)
cbind(grp10$observed, round(grp10$expect, digits = 1))
grp10
library(LOGIT)
library(LOGIT)
library(LOGIT)
library(LOGIT)
library(LOGIT)
detach("package:LOGIT", unload=TRUE)
library("LOGIT", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(LOGIT)
library(LOGIT)
library(LOGIT)
library(LOGIT)
library(LOGIT)
detach("package:LOGIT", unload=TRUE)
library("LOGIT", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(LOGIT)
library(LOGIT)
library(LOGIT)
data(medpar)
medpar
library(LOGIT)
library(COUNT)     # or library(LOGIT)
data(medpar)
glmpb <- glm(los ~ hmo + white + factor(type), family=poisson, data=medpar)
summary(glmpb)
exp(coef(glmpb))
toRR(glmpb)
library(LOGIT)
library(LOGIT)
library(LOGIT)
library(LOGIT)
library(LOGIT)
library(LOGIT)
library(LOGIT)
library(LOGIT)
library(MASS)  library(LOGIT)
#'  data(R84)
#'  R84$cage <- R84$age - mean(R84$age)
#'  R84$cdoc <- R84$docvis - mean(R84$docvis)
#'  mylogit <- glm(outwork ~ cdoc + female + kids + cage + factor(edlevel),
#'  family=binomial, data=R84)
#'  summary(mylogit)
#'  ROCtest(mylogit, fold=10, type="Sensitivity")
#'  ROCtest(mylogit, fold=10, type="ROC")
library(MASS)  library(LOGIT)
data(R84)
R84$cage <- R84$age - mean(R84$age)
R84$cdoc <- R84$docvis - mean(R84$docvis)
mylogit <- glm(outwork ~ cdoc + female + kids + cage + factor(edlevel),
family=binomial, data=R84)
summary(mylogit)
ROCtest(mylogit, fold=10, type="Sensitivity")
ROCtest(mylogit, fold=10, type="ROC")
library(MASS)
library(MASS)  library(LOGIT)
data(R84)
R84$cage <- R84$age - mean(R84$age)
R84$cdoc <- R84$docvis - mean(R84$docvis)
mylogit <- glm(outwork ~ cdoc + female + kids + cage + factor(edlevel),
family=binomial, data=R84)
summary(mylogit)
ROCtest(mylogit, fold=10, type="Sensitivity")
ROCtest(mylogit, fold=10, type="ROC")
R84[1,]
glm(outwork ~ cdoc + female + kids + cage + factor(edlevel),
family=binomial, data=R84)
mylogit
ROCtest(mylogit, fold=10, type="Sensitivity")
mylogit
mylogit$data
model<-mylogit
data<-model$data
response=as.character(model$formula[[2]])
response
glm(model$formula, family = binomial, data= data)
fold=10
type="ROC"
folds <- createFolds(data[,response], k=fold)
AUC<-c()
ROC_all<-c()
cut<-c()
require(caret)
training <-data[-folds[[i]], ]
testing <- data[folds[[i]], ]
myroc <- glm(model$formula, family = binomial, data= training)
folds <- createFolds(data[,response], k=fold)
AUC<-c()
ROC_all<-c()
cut<-c()
training <-data[-folds[[i]], ]
testing <- data[folds[[i]], ]
myroc <- glm(model$formula, family = binomial, data= training)
i=10
training <-data[-folds[[i]], ]
testing <- data[folds[[i]], ]
myroc <- glm(model$formula, family = binomial, data= training)
ROC.a<- data.frame(True = training[,response],predicted=predict(myroc, newdata=training,type = "response"))
F1 <-roc(ROC.a$True,ROC.a$predicted)
ROC.b<- data.frame(True=testing[,response],predicted=predict(myroc, newdata=testing,type = "response"))
pROC
require(glm(model$formula, family = binomial, data= training))
require(pROC)
myroc <- glm(model$formula, family = binomial, data= training)
ROC.a<- data.frame(True = training[,response],predicted=predict(myroc, newdata=training,type = "response"))
F1 <-roc(ROC.a$True,ROC.a$predicted)
ROC.b<- data.frame(True=testing[,response],predicted=predict(myroc, newdata=testing,type = "response"))
ROC.b$class<-ROC.b$predicted
ROC.b$class[which(ROC.b$class>=coords(F1,x="best")[1])]<-1
ROC.b$class[which(ROC.b$class<coords(F1,x="best")[1])]<-0
F2 <-roc(ROC.b$True,ROC.b$predicted)
ROC_all<-rbind(ROC_all,ROC.b)
AUC<-append(AUC,F2$auc)
AUC
data<-model$data
response=as.character(model$formula[[2]])
folds <- createFolds(data[,response], k=fold)
AUC<-c()
ROC_all<-c()
cut<-c()
# Run k-fold and ROC analysis
for(i in 1:fold){
training <-data[-folds[[i]], ]
testing <- data[folds[[i]], ]
myroc <- glm(model$formula, family = binomial, data= training)
ROC.a<- data.frame(True = training[,response],predicted=predict(myroc, newdata=training,type = "response"))
F1 <-roc(ROC.a$True,ROC.a$predicted)
ROC.b<- data.frame(True=testing[,response],predicted=predict(myroc, newdata=testing,type = "response"))
ROC.b$class<-ROC.b$predicted
ROC.b$class[which(ROC.b$class>=coords(F1,x="best")[1])]<-1
ROC.b$class[which(ROC.b$class<coords(F1,x="best")[1])]<-0
F2 <-roc(ROC.b$True,ROC.b$predicted)
ROC_all<-rbind(ROC_all,ROC.b)
AUC<-append(AUC,F2$auc)
}
AUC
GROC<-roc(ROC_all$True,ROC_all$predicted)
cut<-coords(GROC,x="best",best.method=c("closest.topleft"))[[1]]
if(type=="ROC") {
g1<-data.frame(Sensitivity=GROC$sensitivities,Specificity=1-GROC$specificities)
gg<- ggplot(data=g1,aes(x=Specificity,y=Sensitivity))+geom_line(size=1.5,alpha=0.7,color="blue4")+
theme_stata( base_size = 11, base_family = "sans")+
theme(plot.title = element_text(hjust=0.5),axis.title.y=element_text(vjust=0.75),axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20))+
annotate("text",size=7, x = 0.75, y = 0.14,color="black", label = paste("AUC: ",round(GROC$auc[1],3),sep="") ) +
geom_segment(x=0,y=0,xend=1,yend=1,colour="red",size=1,linetype="dashed")+
xlab("1-Specificity")
return(list(plot=gg,Observed=factor(ROC_all$True),Predicted=factor(ROC_all$class),cut=cut))
}
require(ggthemes)
if(type=="ROC") {
g1<-data.frame(Sensitivity=GROC$sensitivities,Specificity=1-GROC$specificities)
gg<- ggplot(data=g1,aes(x=Specificity,y=Sensitivity))+geom_line(size=1.5,alpha=0.7,color="blue4")+
theme_stata( base_size = 11, base_family = "sans")+
theme(plot.title = element_text(hjust=0.5),axis.title.y=element_text(vjust=0.75),axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20))+
annotate("text",size=7, x = 0.75, y = 0.14,color="black", label = paste("AUC: ",round(GROC$auc[1],3),sep="") ) +
geom_segment(x=0,y=0,xend=1,yend=1,colour="red",size=1,linetype="dashed")+
xlab("1-Specificity")
return(list(plot=gg,Observed=factor(ROC_all$True),Predicted=factor(ROC_all$class),cut=cut))
}
g1<-data.frame(Sensitivity=GROC$sensitivities,Specificity=1-GROC$specificities)
gg<- ggplot(data=g1,aes(x=Specificity,y=Sensitivity))+geom_line(size=1.5,alpha=0.7,color="blue4")+
theme_stata( base_size = 11, base_family = "sans")+
theme(plot.title = element_text(hjust=0.5),axis.title.y=element_text(vjust=0.75),axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20))+
annotate("text",size=7, x = 0.75, y = 0.14,color="black", label = paste("AUC: ",round(GROC$auc[1],3),sep="") ) +
geom_segment(x=0,y=0,xend=1,yend=1,colour="red",size=1,linetype="dashed")+
xlab("1-Specificity")
return(list(plot=gg,Observed=factor(ROC_all$True),Predicted=factor(ROC_all$class),cut=cut))
gg<- ggplot(data=g1,aes(x=Specificity,y=Sensitivity))+geom_line(size=1.5,alpha=0.7,color="blue4")+
theme_stata( base_size = 11, base_family = "sans")+
theme(plot.title = element_text(hjust=0.5),axis.title.y=element_text(vjust=0.75),axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20))+
annotate("text",size=7, x = 0.75, y = 0.14,color="black", label = paste("AUC: ",round(GROC$auc[1],3),sep="") ) +
geom_segment(x=0,y=0,xend=1,yend=1,colour="red",size=1,linetype="dashed")+
xlab("1-Specificity")
gg
ROCtest(mylogit, fold=10, type="Sensitivity")
library(LOGIT)
library(MASS)
data(R84)
R84$cage <- R84$age - mean(R84$age)
R84$cdoc <- R84$docvis - mean(R84$docvis)
mylogit <- glm(outwork ~ cdoc + female + kids + cage + factor(edlevel),
family=binomial, data=R84)
summary(mylogit)
ROCtest(mylogit, fold=10, type="Sensitivity")
ROCtest(mylogit, fold=10, type="ROC")
iQuantile <- function (x, breaks=15) {
#indices in x[] of percentile steps by 1/breaks
xo <- order(x)  #sort indices
n <- length(x)
r <- rep(0, breaks+1)
r[1]<- 1
r[breaks+1]<- n
r[2:breaks]<- round(1:(breaks-1)*n/breaks)
return(list(index=r,cuts=x[xo[r]]))
}
library(MASS)
data(medpar)
mylogit <- glm( died ~  los + white + hmo, family=binomial, data=medpar)
summary(mylogit)
medpar2 <- na.omit(medpar)
hlGOF.test(medpar$died, predict(mylogit,medpar2, type="response"), breaks=12)
hlGOF.test <- function (observed, predicted, breaks=15) {
#H-L GOF test for logistic regression
#observed and predicted should not have missing values and match by index
cat('\n', 'Hosmer-Lemeshow GOF test', '\n')
ndata <- length(predicted)
cuts <- c(round(.75*breaks), breaks, round(1.25*breaks))
pvals <- rep(1,cuts[3]) #p-values
for (nCuts in cuts) {
ip <- order(predicted)
iq <- iQuantile(predicted, nCuts) #indices for cuts
iqInd<- iq$index
cat('\n','For # Cuts =',nCuts,'  # Data =',ndata,'\n')
cat('Cut  # Total #Patterns # Resp.    # Pred.  Mean Resp. Mean Pred.','\n')
x2 <- 0
ntot <- 0
for (i in 1:nCuts) {
if (i==1) {
isubs <- ip[1:iqInd[2]]
} else {
isubs <- ip[(iqInd[i]+1):iqInd[i+1]]
}
nsubs <- length(isubs)
ntot <- ntot + nsubs
aobs <- mean(observed[isubs])
mobs <- sum(observed[isubs])
ncvp <- length(unique(predicted[isubs]))
apred <- mean(predicted[isubs])
mpred <- apred*nsubs
x2 <- x2 + (mobs-mpred)^2/mpred + ((nsubs-mobs) - (nsubs-mpred))^2/(nsubs-mpred)
cat(sprintf('%3d',i), sprintf('%8d', nsubs), sprintf('%8d', ncvp), sprintf('%8d', mobs),
sprintf('%10.2f',mpred), sprintf('%8.5f', aobs), sprintf('%8.5f',apred), '\n')
}
cat('Total # Data:',ndata,' Total over cuts:',ntot,'\n')
pvals[nCuts] <- pchisq(x2,nCuts-2,lower.tail=FALSE)
cat('Chisq:', x2, '  d.f.:', sprintf('%d',nCuts-2), ' P-value:',
sprintf('%8.5f', pvals[nCuts]),'\n')
}
cat('\n','Minimum P-value: ',sprintf('%8.5f',min(pvals)),'\n')
}
hlGOF.test(medpar$died, predict(mylogit,medpar2, type="response"), breaks=12)
hlGOF.test(medpar2$died, predict(mylogit,medpar2, type="response"), breaks=12)
library(LOGIT)
library(LOGIT)
library(LOGIT)
uNames <- function(k,Q){
#Function to make a string of variables names of the form:
#c("u[1]","u[2]", etc, "u[50]")
#Q=50 knots were used
String<-NULL
for (j in 1:Q){String <- c(String, paste(k,"[",j,"]",sep = ""))}
String
}
library(R2jags)
library(LOGIT)
data(medpar)
%<JAGS code with J0 as MCMC algorithm>
out <- J0$BUGS$output
myB <- MuBUGS$Output(out, c(uNames("beta", K), "LogL", "AIC", "BIC"))
round(myB, 4)
library(R2jags)
library(LOGIT)
data(medpar)
%JAGS code with J0 as MCMC algorithm
out <- J0$BUGS$output
myB <- MuBUGS$Output(out, c(uNames("beta", K), "LogL", "AIC", "BIC"))
round(myB, 4)
out <- J0$BUGS$output
MyBUGSOutput <- function(xx,vars){
x <- xx$sims.matrix
OUT <- matrix(nrow = length(vars), ncol=4)
j<-1
for(i in vars){
xi <- x[,i]
OUT[j,3:4] <- quantile(xi, probs = c(0.025, 0.975))
OUT[j,1] <- mean(xi)
OUT[j,2] <- sd(xi)
j <- j + 1
}
colnames(OUT) <- c("mean", "se", "2.5%", "97.5%")
rownames(OUT) <- vars
OUT
}
################################################################
uNames <- function(k,Q){
#Function to make a string of variables names of the form:
#c("u[1]","u[2]", etc, "u[50]")
#Q=50 knots were used
String<-NULL
for (j in 1:Q){String <- c(String, paste(k,"[",j,"]",sep = ""))}
String
}
install.packages("devtools")
install_github("RafaelSdeSouza/LOGIT")
require(devtools)
install_github("RafaelSdeSouza/LOGIT")
require(LOGIT)
library(MASS)
library(LOGIT)
data(medpar)
medpar$los<-as.numeric(medpar$los)
mypoi <- glm(los ~ white + hmo + factor(age80), family=poisson, data=medpar)
summary(mypoi)
toRR(mypoi)
library(MASS)
library(LOGIT)
data(medpar)
mylogit <- glm(died ~ los + white + hmo, family=binomial, data=medpar)
summary(mylogit)
toOR(mylogit)
library(MASS)
library(LOGIT)
data(R84)
R84$cage <- R84$age - mean(R84$age)
R84$cdoc <- R84$docvis - mean(R84$docvis)
mylogit <- glm(outwork ~ cdoc + female + kids + cage + factor(edlevel),
family=binomial, data=R84)
summary(mylogit)
ROCtest(mylogit, fold=10, type="Sensitivity")
ROCtest(mylogit, fold=10, type="ROC")
data(R84)
R84
library(MASS)
library(LOGIT)
data(R84)
R84$cage <- R84$age - mean(R84$age)
R84$cdoc <- R84$docvis - mean(R84$docvis)
mylogit <- glm(outwork ~ cdoc + female + kids + cage + factor(edlevel),
family=binomial, data=R84)
summary(mylogit)
ROCtest(mylogit, fold=10, type="Sensitivity")
ROCtest(mylogit, fold=10, type="ROC")
mylogit <- glm(died ~ los + white + hmo, family=binomial, data=medpar)
summary(mylogit)
ROCtest(mylogit, fold=10, type="Sensitivity")
library(LOGIT)
library(MASS)
library(LOGIT)
data(titanicgrp)
class03 <- factor(titanicgrp$class, levels=c("3rd class", "2nd class", "1st class"))
died <- titanicgrp$cases - titanicgrp$survive
grptit <- glm( cbind(survive, died) ~ age+sex+class03, family=binomial,
data=titanicgrp)
summary(grptit)
P__disp(grptit)
library(LOGIT)
detach("package:LOGIT", unload=TRUE)
library("LOGIT", lib.loc="~/Library/R/3.1/library")
library(MASS)
library(LOGIT)
data(titanicgrp)
class03 <- factor(titanicgrp$class, levels=c("3rd class", "2nd class", "1st class"))
died <- titanicgrp$cases - titanicgrp$survive
grptit <- glm( cbind(survive, died) ~ age+sex+class03, family=binomial,
data=titanicgrp)
summary(grptit)
P__disp(grptit)
library(LOGIT)
library(MASS)
library(LOGIT)
data(titanicgrp)
class03 <- factor(titanicgrp$class, levels=c("3rd class", "2nd class", "1st class"))
died <- titanicgrp$cases - titanicgrp$survive
grptit <- glm( cbind(survive, died) ~ age+sex+class03, family=binomial,
data=titanicgrp)
summary(grptit)
P__disp(grptit)
library(LOGIT)
P__disp <- function(x) {
pr <- sum(residuals(x, type = "pearson")^2)
dispersion <- pr/x$df.residual
cat("\n Pearson Chi2 = ", pr ,
"\n Dispersion   = ", dispersion, "\n")
}
library(MASS)
library(LOGIT)
data(titanicgrp)
class03 <- factor(titanicgrp$class, levels=c("3rd class", "2nd class", "1st class"))
died <- titanicgrp$cases - titanicgrp$survive
grptit <- glm( cbind(survive, died) ~ age+sex+class03, family=binomial,
data=titanicgrp)
summary(grptit)
P__disp(grptit)
library(LOGIT)
P__disp(grptit)
library(LOGIT)
P_disp(grptit)
library(LOGIT)
P_disp(grptit)
library(LOGIT)
P_disp(grptit)
